{"name": "test_get_workouts_by_user_id_no_workouts", "status": "broken", "statusDetails": {"message": "django.urls.exceptions.NoReverseMatch: Reverse for 'get_workouts_by_user_id' not found. 'get_workouts_by_user_id' is not a valid view function or pattern name.", "trace": "self = <exercise_program_app.tests.GetWorkoutsByUserIdTestCase testMethod=test_get_workouts_by_user_id_no_workouts>\n\n    def test_get_workouts_by_user_id_no_workouts(self):\n        # Simulate a GET request to retrieve workouts by user ID with no workouts\n>       url = reverse('get_workouts_by_user_id', args=[self.other_user.user_id])\n\nexercise_program_app/tests.py:249: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.11/site-packages/django/urls/base.py:88: in reverse\n    return resolver._reverse_with_prefix(view, prefix, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <URLResolver 'fitness_project.urls' (None:None) '^/'>, lookup_view = 'get_workouts_by_user_id', _prefix = '/', args = (14,), kwargs = {}, possibilities = []\n\n    def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):\n        if args and kwargs:\n            raise ValueError(\"Don't mix *args and **kwargs in call to reverse()!\")\n    \n        if not self._populated:\n            self._populate()\n    \n        possibilities = self.reverse_dict.getlist(lookup_view)\n    \n        for possibility, pattern, defaults, converters in possibilities:\n            for result, params in possibility:\n                if args:\n                    if len(args) != len(params):\n                        continue\n                    candidate_subs = dict(zip(params, args))\n                else:\n                    if set(kwargs).symmetric_difference(params).difference(defaults):\n                        continue\n                    matches = True\n                    for k, v in defaults.items():\n                        if k in params:\n                            continue\n                        if kwargs.get(k, v) != v:\n                            matches = False\n                            break\n                    if not matches:\n                        continue\n                    candidate_subs = kwargs\n                # Convert the candidate subs to text using Converter.to_url().\n                text_candidate_subs = {}\n                match = True\n                for k, v in candidate_subs.items():\n                    if k in converters:\n                        try:\n                            text_candidate_subs[k] = converters[k].to_url(v)\n                        except ValueError:\n                            match = False\n                            break\n                    else:\n                        text_candidate_subs[k] = str(v)\n                if not match:\n                    continue\n                # WSGI provides decoded URLs, without %xx escapes, and the URL\n                # resolver operates on such URLs. First substitute arguments\n                # without quoting to build a decoded URL and look for a match.\n                # Then, if we have a match, redo the substitution with quoted\n                # arguments in order to return a properly encoded URL.\n                candidate_pat = _prefix.replace(\"%\", \"%%\") + result\n                if re.search(\n                    \"^%s%s\" % (re.escape(_prefix), pattern),\n                    candidate_pat % text_candidate_subs,\n                ):\n                    # safe characters from `pchar` definition of RFC 3986\n                    url = quote(\n                        candidate_pat % text_candidate_subs,\n                        safe=RFC3986_SUBDELIMS + \"/~:@\",\n                    )\n                    # Don't allow construction of scheme relative urls.\n                    return escape_leading_slashes(url)\n        # lookup_view can be URL name or callable, but callables are not\n        # friendly in error messages.\n        m = getattr(lookup_view, \"__module__\", None)\n        n = getattr(lookup_view, \"__name__\", None)\n        if m is not None and n is not None:\n            lookup_view_s = \"%s.%s\" % (m, n)\n        else:\n            lookup_view_s = lookup_view\n    \n        patterns = [pattern for (_, pattern, _, _) in possibilities]\n        if patterns:\n            if args:\n                arg_msg = \"arguments '%s'\" % (args,)\n            elif kwargs:\n                arg_msg = \"keyword arguments '%s'\" % kwargs\n            else:\n                arg_msg = \"no arguments\"\n            msg = \"Reverse for '%s' with %s not found. %d pattern(s) tried: %s\" % (\n                lookup_view_s,\n                arg_msg,\n                len(patterns),\n                patterns,\n            )\n        else:\n            msg = (\n                \"Reverse for '%(view)s' not found. '%(view)s' is not \"\n                \"a valid view function or pattern name.\" % {\"view\": lookup_view_s}\n            )\n>       raise NoReverseMatch(msg)\nE       django.urls.exceptions.NoReverseMatch: Reverse for 'get_workouts_by_user_id' not found. 'get_workouts_by_user_id' is not a valid view function or pattern name.\n\nvenv/lib/python3.11/site-packages/django/urls/resolvers.py:828: NoReverseMatch"}, "start": 1732878651510, "stop": 1732878651763, "uuid": "3f3cc5c9-019c-4968-b5b3-277cd526f5d5", "historyId": "c957100abcb635725c82ff5e86558def", "testCaseId": "c957100abcb635725c82ff5e86558def", "fullName": "backend.exercise_program_app.tests.GetWorkoutsByUserIdTestCase#test_get_workouts_by_user_id_no_workouts", "labels": [{"name": "parentSuite", "value": "backend.exercise_program_app"}, {"name": "suite", "value": "tests"}, {"name": "subSuite", "value": "GetWorkoutsByUserIdTestCase"}, {"name": "host", "value": "Kaan-MacBook-Pro-2.local"}, {"name": "thread", "value": "85893-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "backend.exercise_program_app.tests"}]}