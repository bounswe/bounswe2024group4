{"name": "test_bookmarked_posts_success", "status": "broken", "statusDetails": {"message": "user_auth_app.models.User.DoesNotExist: User matching query does not exist.", "trace": "self = <posts_app.tests.BookmarkedPostsViewTestCase testMethod=test_bookmarked_posts_success>\n\n    def test_bookmarked_posts_success(self):\n        # Simulate a GET request to retrieve bookmarked posts\n        url = reverse('bookmarked_posts')\n>       response = self.client.get(url)\n\nposts_app/tests.py:414: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.11/site-packages/django/test/client.py:927: in get\n    response = super().get(path, data=data, secure=secure, headers=headers, **extra)\nvenv/lib/python3.11/site-packages/django/test/client.py:457: in get\n    return self.generic(\nvenv/lib/python3.11/site-packages/django/test/client.py:609: in generic\n    return self.request(**r)\nvenv/lib/python3.11/site-packages/django/test/client.py:891: in request\n    self.check_exception(response)\nvenv/lib/python3.11/site-packages/django/test/client.py:738: in check_exception\n    raise exc_value\nvenv/lib/python3.11/site-packages/django/core/handlers/exception.py:55: in inner\n    response = get_response(request)\nvenv/lib/python3.11/site-packages/django/core/handlers/base.py:197: in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\nvenv/lib/python3.11/site-packages/django/views/decorators/csrf.py:56: in wrapper_view\n    return view_func(*args, **kwargs)\nvenv/lib/python3.11/site-packages/django/views/generic/base.py:104: in view\n    return self.dispatch(request, *args, **kwargs)\nvenv/lib/python3.11/site-packages/rest_framework/views.py:509: in dispatch\n    response = self.handle_exception(exc)\nvenv/lib/python3.11/site-packages/rest_framework/views.py:469: in handle_exception\n    self.raise_uncaught_exception(exc)\nvenv/lib/python3.11/site-packages/rest_framework/views.py:480: in raise_uncaught_exception\n    raise exc\nvenv/lib/python3.11/site-packages/rest_framework/views.py:506: in dispatch\n    response = handler(request, *args, **kwargs)\nvenv/lib/python3.11/site-packages/rest_framework/decorators.py:50: in handler\n    return func(*args, **kwargs)\nvenv/lib/python3.11/site-packages/django/views/decorators/csrf.py:56: in wrapper_view\n    return view_func(*args, **kwargs)\nposts_app/views.py:172: in bookmarked_posts\n    user = User.objects.get(username=request.GET.get('username'))\nvenv/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <QuerySet []>, args = (), kwargs = {'username': None}, clone = <QuerySet []>, limit = 21, num = 0\n\n    def get(self, *args, **kwargs):\n        \"\"\"\n        Perform the query and return a single object matching the given\n        keyword arguments.\n        \"\"\"\n        if self.query.combinator and (args or kwargs):\n            raise NotSupportedError(\n                \"Calling QuerySet.get(...) with filters after %s() is not \"\n                \"supported.\" % self.query.combinator\n            )\n        clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)\n        if self.query.can_filter() and not self.query.distinct_fields:\n            clone = clone.order_by()\n        limit = None\n        if (\n            not clone.query.select_for_update\n            or connections[clone.db].features.supports_select_for_update_with_limit\n        ):\n            limit = MAX_GET_RESULTS\n            clone.query.set_limits(high=limit)\n        num = len(clone)\n        if num == 1:\n            return clone._result_cache[0]\n        if not num:\n>           raise self.model.DoesNotExist(\n                \"%s matching query does not exist.\" % self.model._meta.object_name\n            )\nE           user_auth_app.models.User.DoesNotExist: User matching query does not exist.\n\nvenv/lib/python3.11/site-packages/django/db/models/query.py:637: DoesNotExist"}, "attachments": [{"name": "log", "source": "928b7f39-bc70-49cb-a13b-7701492dcd3f-attachment.txt", "type": "text/plain"}], "start": 1732823432851, "stop": 1732823433099, "uuid": "eeb14fd4-51c7-44b1-8999-9e7e44c00720", "historyId": "f5a66d266b1e27a77d81bbf8aa39f6db", "testCaseId": "f5a66d266b1e27a77d81bbf8aa39f6db", "fullName": "backend.posts_app.tests.BookmarkedPostsViewTestCase#test_bookmarked_posts_success", "labels": [{"name": "parentSuite", "value": "backend.posts_app"}, {"name": "suite", "value": "tests"}, {"name": "subSuite", "value": "BookmarkedPostsViewTestCase"}, {"name": "host", "value": "Kaan-MacBook-Pro-2.local"}, {"name": "thread", "value": "75128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "backend.posts_app.tests"}]}