{"name": "test_follow_yourself", "status": "broken", "statusDetails": {"message": "user_auth_app.models.User.DoesNotExist: User matching query does not exist.", "trace": "self = <simple_features_app.tests.TestFollowUnfollow testMethod=test_follow_yourself>\n\n    def test_follow_yourself(self):\n        self.client.force_login(User.objects.get(username='user1'))\n>       response = self.client.post('/follow/', {'following': 'user1'})\n\nsimple_features_app/tests.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.11/site-packages/django/test/client.py:948: in post\n    response = super().post(\nvenv/lib/python3.11/site-packages/django/test/client.py:482: in post\n    return self.generic(\nvenv/lib/python3.11/site-packages/django/test/client.py:609: in generic\n    return self.request(**r)\nvenv/lib/python3.11/site-packages/django/test/client.py:891: in request\n    self.check_exception(response)\nvenv/lib/python3.11/site-packages/django/test/client.py:738: in check_exception\n    raise exc_value\nvenv/lib/python3.11/site-packages/django/core/handlers/exception.py:55: in inner\n    response = get_response(request)\nvenv/lib/python3.11/site-packages/django/core/handlers/base.py:197: in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\nvenv/lib/python3.11/site-packages/django/views/decorators/csrf.py:56: in wrapper_view\n    return view_func(*args, **kwargs)\nvenv/lib/python3.11/site-packages/django/views/generic/base.py:104: in view\n    return self.dispatch(request, *args, **kwargs)\nvenv/lib/python3.11/site-packages/rest_framework/views.py:509: in dispatch\n    response = self.handle_exception(exc)\nvenv/lib/python3.11/site-packages/rest_framework/views.py:469: in handle_exception\n    self.raise_uncaught_exception(exc)\nvenv/lib/python3.11/site-packages/rest_framework/views.py:480: in raise_uncaught_exception\n    raise exc\nvenv/lib/python3.11/site-packages/rest_framework/views.py:506: in dispatch\n    response = handler(request, *args, **kwargs)\nvenv/lib/python3.11/site-packages/rest_framework/decorators.py:50: in handler\n    return func(*args, **kwargs)\nsimple_features_app/views.py:49: in follow\n    follower = User.objects.get(username=request.data.get('follower'))\nvenv/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <QuerySet []>, args = (), kwargs = {'username': None}, clone = <QuerySet []>, limit = 21, num = 0\n\n    def get(self, *args, **kwargs):\n        \"\"\"\n        Perform the query and return a single object matching the given\n        keyword arguments.\n        \"\"\"\n        if self.query.combinator and (args or kwargs):\n            raise NotSupportedError(\n                \"Calling QuerySet.get(...) with filters after %s() is not \"\n                \"supported.\" % self.query.combinator\n            )\n        clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)\n        if self.query.can_filter() and not self.query.distinct_fields:\n            clone = clone.order_by()\n        limit = None\n        if (\n            not clone.query.select_for_update\n            or connections[clone.db].features.supports_select_for_update_with_limit\n        ):\n            limit = MAX_GET_RESULTS\n            clone.query.set_limits(high=limit)\n        num = len(clone)\n        if num == 1:\n            return clone._result_cache[0]\n        if not num:\n>           raise self.model.DoesNotExist(\n                \"%s matching query does not exist.\" % self.model._meta.object_name\n            )\nE           user_auth_app.models.User.DoesNotExist: User matching query does not exist.\n\nvenv/lib/python3.11/site-packages/django/db/models/query.py:637: DoesNotExist"}, "attachments": [{"name": "log", "source": "40bc0929-ab4f-49da-8a20-fa5fb8dd7197-attachment.txt", "type": "text/plain"}], "start": 1732823433525, "stop": 1732823433536, "uuid": "22ea265a-9106-4245-97b2-d6c3391af9cd", "historyId": "3b6ecfc1369cb3844d1440c8e97566cc", "testCaseId": "3b6ecfc1369cb3844d1440c8e97566cc", "fullName": "backend.simple_features_app.tests.TestFollowUnfollow#test_follow_yourself", "labels": [{"name": "parentSuite", "value": "backend.simple_features_app"}, {"name": "suite", "value": "tests"}, {"name": "subSuite", "value": "TestFollowUnfollow"}, {"name": "host", "value": "Kaan-MacBook-Pro-2.local"}, {"name": "thread", "value": "75128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "backend.simple_features_app.tests"}]}